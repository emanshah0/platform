import React, { useState } from 'react';
import styled from 'styled-components';
import BooleanInput from './BooleanInput';
import TextInput from './TextInput';
import FloatInput from './FloatInput';
import IntegerInput from './IntegerInput';

const FormWrapper = styled.form`
  display: flex;
  flex-direction: column;
`;

const InputGroup = styled.div`
  display: flex;
  align-items: center;
  margin: 10px 0;
`;

const Label = styled.label`
  width: 150px; // You can adjust this width to your preference
  margin-right: 10px;
`;

const CustomForm = ({ questions, onSubmit }) => {
  const [formData, setFormData] = useState({ date: new Date().toISOString() });

  const handleChange = (e) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value,
    });
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    onSubmit(formData);
  };

  return (
    <FormWrapper onSubmit={handleSubmit}>
      <InputGroup>
        <Label htmlFor="technician">Technician:</Label>
        <TextInput name="technician" onChange={handleChange} />
      </InputGroup>

      <InputGroup>
        <Label htmlFor="serialNumber">Serial Number:</Label>
        <TextInput name="serialNumber" onChange={handleChange} />
      </InputGroup>

      {questions.map((question, index) => {
        return (
          <InputGroup key={index}>
            <Label htmlFor={question.name}>{question.label}:</Label>
            {(() => {
              switch (question.type) {
                case 'boolean':
                  return (
                    <BooleanInput
                      name={question.name}
                      onChange={handleChange}
                    />
                  );
                case 'text':
                  return (
                    <TextInput
                      name={question.name}
                      onChange={handleChange}
                    />
                  );
                case 'float':
                  return (
                    <FloatInput
                      name={question.name}
                      onChange={handleChange}
                    />
                  );
                case 'integer':
                  return (
                    <IntegerInput
                      name={question.name}
                      onChange={handleChange}
                    />
                  );
                default:
                  return null;
              }
            })()}
          </InputGroup>
        );
      })}

      <input type="submit" value="Submit" />
    </FormWrapper>
  );
};

export default CustomForm;
