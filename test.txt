import React, { useState } from "react";
import styled, { css } from "styled-components";
import { boxShadow } from "../data";

const Container = styled.div`
  display: flex;
  position: relative;
  flex-direction: column;
  align-items: center;
  padding: 10px;
  box-shadow: ${boxShadow.light};
  border-color: rgba(0, 0, 0, 0);
  border-width: 0px;
  border-radius: 5px;
  margin: 10px;
  max-height: 280px;
  max-width: 650px;
  overflow: auto;
  ::-webkit-scrollbar {
    width: 0;
    height: 0;
  }

  @media print {
    .scrollable-table {
      overflow: visible;
      height: auto;
    }
  }
`;

const Table = styled.table`
  border-collapse: collapse;
  width: 100%;
  margin-bottom: 10px;
  row-gap: 2px;
  overflow: auto;

  ${({ printMode }) =>
    printMode &&
    css`
      overflow: visible;
      height: auto;
      max-height: none;
    `}
`;

const TableHeader = styled.th`
  background: linear-gradient(to bottom, #000000c1, #0355179e);
  color: white;
  text-align: center;
  padding: 8px;
  font-size: 14px;
`;

const TableRow = styled.tr`
  cursor: pointer;
  &:hover {
    transform: scale(1.02);
  }
`;

const TableCell = styled.td`
  padding: 8px;
`;

const ValueCell = styled.div`
  font-size: 14px;
  text-align: center;
`;

const FieldCell = styled.div`
  font-size: 14px;
`;

const Title = styled.h2`
  font-size: 16px;
  font-weight: bold;
  margin-bottom: 5px;
`;

function TableDisplay({ content, printMode }) {
  const [selectedRow, setSelectedRow] = useState(null);

  if (
    !content ||
    content.type !== "table" ||
    content.data.rows.length === 0
  ) {
    return <div>No data available</div>;
  }

  const tableData = content.data.rows;
  const fields = Object.keys(tableData[0]).filter((field) => field !== "id");

  const handleRowClick = (id) => {
    setSelectedRow(id);
  };

  return (
    <Container>
      <Title>{content.title}</Title>
      <Table className="scrollable-table" printMode={printMode}>
        <thead>
          <tr>
            {fields.map((field) => (
              <TableHeader key={field}>{field.toUpperCase()}</TableHeader>
            ))}
          </tr>
        </thead>
        <tbody>
          {tableData.map((item) => (
            <TableRow
              key={item.id}
              onClick={() => handleRowClick(item.id)}
              selected={selectedRow === item.id}
            >
              {fields.map((field) => (
                <TableCell key={`${item.id}-${field}`}>
                  {field === "Result" ? (
                    <ValueCell
                      style={{ color: item[field] ? "green" : "red" }}
                    >
                      {item[field] ? "PASS" : "FAIL"}
                    </ValueCell>
                  ) : field === "Value" || field === "Expected" ? (
                    <ValueCell>{item[field].toString()}</ValueCell>
                  ) : (
                    <FieldCell>{item[field]}</FieldCell>
                  )}
                </TableCell>
              ))}
            </TableRow>
          ))}
        </tbody>
      </Table>
    </Container>
  );
}

export default TableDisplay;
