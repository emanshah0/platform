import React, { useState } from 'react';
import styled from 'styled-components';
import BooleanInput from './BooleanInput';
import TextInput from './TextInput';
import FloatInput from './FloatInput';
import IntegerInput from './IntegerInput';

const FormWrapper = styled.div`
  display: flex;
  flex-direction: column;
`;

const InputRow = styled.div`
  display: flex;
  justify-content: space-between;
  margin: 10px 0;
`;

const Input = styled.input`
  margin: 0 10px;
`;

const Label = styled.label`
  margin: 10px;
`;

const CustomForm = ({ questions, onSubmit }) => {
  const [formData, setFormData] = useState({ date: new Date().toISOString() });

  const handleChange = (e) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value,
    });
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    onSubmit(formData);
  };

  return (
    <FormWrapper onSubmit={handleSubmit}>
      <InputRow>
        <Label htmlFor="technician">Technician:</Label>
        <Input type="text" name="technician" onChange={handleChange} />

        <Label htmlFor="serialNumber">Serial Number:</Label>
        <Input type="text" name="serialNumber" onChange={handleChange} />
      </InputRow>

      {questions.map((question, index) => {
        switch (question.type) {
          case 'boolean':
            return (
              <BooleanInput
                key={index}
                name={question.name}
                label={question.label}
                onChange={handleChange}
              />
            );
          case 'text':
            return (
              <TextInput
                key={index}
                name={question.name}
                label={question.label}
                onChange={handleChange}
              />
            );
          case 'float':
            return (
              <FloatInput
                key={index}
                name={question.name}
                label={question.label}
                onChange={handleChange}
              />
            );
          case 'integer':
            return (
              <IntegerInput
                key={index}
                name={question.name}
                label={question.label}
                onChange={handleChange}
              />
            );
          default:
            return null;
        }
      })}

      <Input type="submit" value="Submit" />
    </FormWrapper>
  );
};

export default CustomForm;
