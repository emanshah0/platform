import React from 'react';
import LineGraph from './LineGraph';

const PrintButton = ({ components }) => {
  const printDiv = () => {
    const printWindow = window.open('', '_blank');
    const printContents = getPrintContents();
    printWindow.document.write(`
      <html>
        <head>
          <title>Print</title>
        </head>
        <body>
          ${printContents}
          <script type="text/javascript">
            window.onload = function() {
              window.print();
              window.onafterprint = function() {
                window.close();
              };
            };
          </script>
        </body>
      </html>
    `);
    printWindow.document.close();
  };

  const getPrintContents = () => {
    return components.map((component, index) => {
      if (component.type === LineGraph) {
        const lineGraphProps = {
          ...component.props,
          chartRef: React.createRef()
        };
        return `<div key=${index} className="component-wrapper">${getLineGraphImage(lineGraphProps)}</div>`;
      }
      return `<div key=${index} className="component-wrapper">${ReactDOMServer.renderToStaticMarkup(component)}</div>`;
    }).join('');
  };

  const getLineGraphImage = (props) => {
    const chartRef = props.chartRef;

    return (
      <div>
        <LineGraph {...props} />
        <img src={getChartImage(chartRef)} alt="Line Graph" />
      </div>
    );
  };

  const getChartImage = (chartRef) => {
    const canvas = chartRef.current.chartInstance.canvas;
    return canvas.toDataURL();
  };

  return (
    <div>
      <button onClick={printDiv}>Print Page</button>
    </div>
  );
};

export default PrintButton;


import React, { useEffect, useRef } from "react";
import { Chart, registerables } from "chart.js";
import styled from "styled-components";
import { boxShadow } from "../data";

Chart.register(...registerables);

const Container = styled.div`
  position: relative;
  width: 500px;
  padding: 5px;
  box-shadow: ${boxShadow.light};
  border-radius: 5px;
  overflow: auto;
`;

const Title = styled.h2`
  font-size: 16px;
  font-weight: bold;
  margin-bottom: 5px;
`;

function checkDecimalPlaces(value) {
  var valstr = value.toString();
  var decimals = value.toFixed(3);
  return valstr !== decimals;
}

function LineGraph({ xData, yData, title }) {
  const chartRef = useRef(null);
  const options = {
    responsive: true,
    maintainAspectRatio: true,
    scales: {
      x: {
        ticks: {
          display: true,
          autoSkip: true,
          maxTicksLimit: 12,
          maxRotation: 0,
          minRotation: 0,
          color: "rgba(255, 255, 255, 0.7)",
        },
        grid: {
          display: false,
          color: "rgba(255, 255, 255, 0.3)",
        },
      },
      y: {
        ticks: {
          display: true,
          autoSkip: true,
          beginAtZero: true,
        },
        grid: {
          display: true,
          drawBorder: false,
          color: "rgba(255, 255, 255, 0.3)",
        },
      },
    },
    plugins: {
      tooltip: {
        bodyFontSize: 10,
        callbacks: {
          label: function (tooltipItem, data) {
            var val = tooltipItem.raw;
            if (val !== null && val !== undefined && !isNaN(val)) {
              if (checkDecimalPlaces(val)) {
                return val.toExponential(3);
              }
            }
          },
        },
      },
      legend: {
        display: true,
        position: "bottom",
      },
    },
  };

  useEffect(() => {
    const ctx = chartRef.current.getContext("2d");
    const chart = new Chart(ctx, {
      type: "line",
      data: {
        labels: xData,
        datasets: [
          {
            label: title,
            data: yData,
            fill: false,
            borderColor: "rgba(75,192,192,1)",
            tension: 0.1,
            borderWidth: 1.3,
            pointRadius: 2,
            hoverRadius: 10,
          },
        ],
      },
      options: options,
    });

    return () => {
      chart.destroy();
    };
  }, [xData, yData]);

  const getLineGraphImage = () => {
    const canvas = document.createElement("canvas");
    const ctx = canvas.getContext("2d");

    canvas.width = 500;
    canvas.height = 500;

    const chart = new Chart(ctx, {
      type: "line",
      data: {
        labels: xData,
        datasets: [
          {
            label: title,
            data: yData,
            fill: false,
            borderColor: "rgba(75,192,192,1)",
            tension: 0.1,
            borderWidth: 1.3,
            pointRadius: 2,
            hoverRadius: 10,
          },
        ],
      },
      options: options,
    });

    return canvas.toDataURL();
  };

  return (
    <Container>
      <Title>{title}</Title>
      <canvas ref={chartRef} style={{ width: "100%" }}></canvas>
      <img src={getLineGraphImage()} alt="Line Graph" />
    </Container>
  );
}

export default LineGraph;
