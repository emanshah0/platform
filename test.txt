import React from 'react';
import ReactDOMServer from 'react-dom/server';
import LineGraph from './LineGraph';

const PrintButton = ({ components }) => {
  const printDiv = () => {
    const printWindow = window.open('', '_blank');
    const printContents = getPrintContents();
    printWindow.document.write(`
      <html>
        <head>
          <title>Print</title>
        </head>
        <body>
          ${printContents}
          <script type="text/javascript">
            window.onload = function() {
              window.print();
              window.onafterprint = function() {
                window.close();
              };
            };
          </script>
        </body>
      </html>
    `);
    printWindow.document.close();
  };

  const getPrintContents = () => {
    return components.map(component =>
      ReactDOMServer.renderToStaticMarkup(component)
    ).join('');
  };

  return (
    <div>
      <button onClick={printDiv}>Print Page</button>
    </div>
  );
};

export default PrintButton;


import React, { useEffect, useRef, useState } from "react";
import { Chart, registerables } from "chart.js";
import styled from "styled-components";
import { boxShadow } from "../data";

Chart.register(...registerables);

const Container = styled.div`
  position: relative;
  width: 500px;
  padding: 5px;
  box-shadow: ${boxShadow.light};
  border-radius: 5px;
  overflow: auto;
`;

const Title = styled.h2`
  font-size: 16px;
  font-weight: bold;
  margin-bottom: 5px;
`;

function checkDecimalPlaces(value) {
  var valstr = value.toString();
  var decimals = value.toFixed(3);
  return valstr !== decimals;
}

function LineGraph({ xData, yData, title }) {
  const chartRef = useRef(null);
  const [imageDataUrl, setImageDataUrl] = useState(null); // new state for image data URL
  const options = {
    responsive: true,
    maintainAspectRatio: true,
    // ... rest of your options
  };

  useEffect(() => {
    const ctx = chartRef.current.getContext("2d");
    const chart = new Chart(ctx, {
      type: "line",
      data: {
        labels: xData,
        datasets: [
          {
            label: title,
            data: yData,
            fill: false,
            borderColor: "rgba(75,192,192,1)",
            tension: 0.1,
            borderWidth: 1.3,
            pointRadius: 2,
            hoverRadius: 10,
          },
        ],
      },
      options: options,
    });

    // After creating the chart, convert it to an image and update the state
    const imageUrl = chart.canvas.toDataURL();
    setImageDataUrl(imageUrl);

    return () => {
      chart.destroy();
    };
  }, [xData, yData]);

  // Render an img tag with the image data URL, in addition to the canvas
  // This image will not be visible on the screen, but it will be printed
  return (
    <Container>
      <Title>{title}</Title>
      <canvas ref={chartRef} style={{ width: "100%" }}></canvas>
      {imageDataUrl && <img src={imageDataUrl} style={{ display: "none" }} alt="Line Graph" />}
    </Container>
  );
}

export default LineGraph;
